% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_shelf_outline.R
\name{get_shelf_outline}
\alias{get_shelf_outline}
\title{Return ice shelf outlines for a given extent}
\usage{
get_shelf_outline(
  extent = "",
  rectangularExtent = FALSE,
  crs = NULL,
  preferType = NULL,
  useOnly = NULL,
  imbieBasins = NULL,
  crsIn = NULL
)
}
\arguments{
\item{extent}{Define the extent used to select ice shelves.

To return only specific ice shelves, enter their names as a vector, and
set 'rectangularExtents' as FALSE (the default).

To return any ice shelves that fall within a geographical extent, set
'rectangularExtents' as TRUE, and follow the logic of \code{\link[=get_extents]{get_extents()}} to
define the geographical extent with the remaining parameters. The most
obvious reason to do this would be to include the outline of ice shelves
within the bounding box of the named ice shelves, but that aren't named
themselves. See examples.}

\item{rectangularExtent}{If 'extent' is a defined string (e.g. "Amery"),
the 'rectangularExtent' argument determines whether the actual outline is
returned (FALSE; the default), or if the rectangular extent of the
bounding box encompassing the area is returned (TRUE). If multiple ice
shelves and/or basins are included, the extent box will extend over all
of them at once.}

\item{crs}{"string": Which projection should the shelves be returned in?
See \code{use_crs()} or \code{terra::crs()}. By default (i.e. NULL), it will match
the first RCM data defined in the ".Rprofile".}

\item{preferType}{Sometimes an ice shelf and the refined MEaSURES basins
have the same name.

Usually they both refer to the same general area, and by default (i.e.
'preferType' = NULL), this function combines both the shelf and basin
extents to form a new larger extent.

However, for some names (e.g. "Shackleton" and "Drygalski"), the name
refers to an ice shelf far away from the basin with the same name,
returning an unexpected extent.

This argument lets the user choose between the two types if the name is
found in both the ice shelves and basins datasets: "shelf", "shelves",
"floating" or "FL" to return the ice shelves; "basin", "basins",
"grounded" or "GR" to return the basins. All other names that aren't in
both the ice shelves and basins datasets will be returned regardless of
this option. See also 'useOnly'.}

\item{useOnly}{If there is a vector containing both ice shelf and basin
names, but only one or the other should be included, use this argument.
Ice shelves or basins are specified as outlined in the 'preferType'
argument.}

\item{imbieBasins}{BINARY: Should the IMBIE basins (TRUE) or the refined
MEaSURES basins (FALSE) be used to define the extent? If NULL (the
default), both the IMBIE and refined basins are returned.

The IMBIE basins are larger, and have codes (e.g. "A-Ap"); the refined
MEaSURES basins are smaller, "sub" regions, and are named after glaciers
(hence their names can overlap with ice shelf names).

This argument is mainly useful if the extent is a vector containing both
names, but only one should be used. Otherwise, just enter only IMBIE or
refined basin names.

\strong{Note:} This argument is distinct from the 'returnImbie' argument used
in functions such as \code{get_shelf_outline()} and \code{get_basin_outline()}.}

\item{crsIn}{"string": This only needs defining if the 'extent' argument is
a SpatExtent, which don't store projection information. This argument
tells the function which projection the extent was defined in.}
}
\description{
This function is useful for plotting or cropping to Antarctic
ice shelves. It is mainly used in the \code{\link[=draw_antarctica]{draw_antarctica()}} and
\code{\link[=crop_to_shelf]{crop_to_shelf()}} functions, but can be used separately as well.

The function works in 2 ways.
\enumerate{
\item A vector of shelf names can be entered as the 'extent', and these
exact ice shelves are simply returned from the MEaSURES ice shelf
dataset. The ice shelf names must match those in the dataset exactly.
\item An extent can be defined according to \code{\link[=get_extent]{get_extent()}}. Any shelves
which intersect with this extent are then returned. This occurs if
'rectangularExtent' is TRUE, and most of the remaining arguments are fed
directly into \code{\link[=get_extent]{get_extent()}}.
}

The ice shelves will be returned in the projection specified by the 'crs'
argument.

\strong{Note:} If an existing ice shelf SpatVector is entered, it will be
returned.
}
\examples{
-----------------------------------------------------------------
\dontrun{
  # All ice shelves in Antarctica
  t1 <- get_shelf_outline()
  terra::plot(t1)

  # Just a single shelf
  t2 <- get_shelf_outline("Amery")
  terra::plot(t2)

  # Multiple shelves; only the named shelves
  t3 <- get_shelf_outline(c("Amery", "West"), rectangularExtent = FALSE)
  terra::plot(t3)

  # Multiple shelves; includes intermediary shelves
  t4 <- get_shelf_outline(c("Amery", "West"), rectangularExtent = TRUE)
  terra::plot(t4)
}
}
